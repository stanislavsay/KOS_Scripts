
// ######################################################################
//
//    POINTING COMPUTER
//
// ######################################################################

SET PLANET_UP TO SHIP:UP:VECTOR.
SET PLANET_NORTH TO SHIP:NORTH:VECTOR.
SET FACING_FORWARD TO SHIP:FACING.
SET FACING_RIGHT TO (FACING_FORWARD * R(0,90,0)).
SET POINTING_COMPUTER_UPDATE_TIME TO TIME:SECONDS.

SET PLANET_DOWN TO PLANET_UP * -1.
SET PLANET_SOUTH TO PLANET_NORTH * -1.
SET PLANET_EAST TO VCRS(PLANET_UP, PLANET_NORTH).
SET PLANET_WEST TO PLANET_EAST * -1.

SET FACING_FORWARD TO FACING_FORWARD:VECTOR.
SET FACING_RIGHT TO FACING_RIGHT:VECTOR.
SET FACING_UP TO VCRS(FACING_FORWARD, FACING_RIGHT).
SET FACING_LEFT TO FACING_RIGHT * -1.
SET FACING_DOWN TO FACING_UP * -1.
SET FACING_BACK TO FACING_FORWARD * -1.

SET HORIZON_FORWARD TO VXCL(PLANET_UP, FACING_FORWARD).
SET HORIZON_RIGHT TO VXCL(PLANET_UP, FACING_RIGHT).

SET FACING_HEADING TO VANG(PLANET_NORTH, HORIZON_FORWARD).
IF VANG(PLANET_EAST, HORIZON_FORWARD) > 90 {
  SET FACING_HEADING TO 180 + FACING_HEADING.
}

SET FACING_PITCH TO VANG(HORIZON_FORWARD, FACING_FORWARD).
IF VANG(PLANET_UP, FACING_FORWARD) > 90 {
  SET FACING_PITCH TO -FACING_PITCH.
}

SET FACING_ROLL TO VANG(HORIZON_RIGHT, FACING_RIGHT).
IF VANG(PLANET_DOWN, FACING_RIGHT) > 90 {
  SET FACING_ROLL TO -FACING_ROLL.
}

IF POINTING_COMPUTER_UPDATE_TIME > PREV_POINTING_COMPUTER_UPDATE_TIME {
  SET FORWARD_DEVIATION TO FACING_FORWARD - PREV_FACING_FORWARD.
  SET RIGHT_DEVIATION TO FACING_RIGHT - PREV_FACING_RIGHT.
  SET UP_DEVIATION TO FACING_UP - VCRS(PREV_FACING_FORWARD, PREV_FACING_RIGHT).
  SET TIME_DEVIATION TO POINTING_COMPUTER_UPDATE_TIME - PREV_POINTING_COMPUTER_UPDATE_TIME.

  SET PREV_FACING_FORWARD TO FACING_FORWARD.
  SET PREV_FACING_RIGHT TO FACING_RIGHT.
  SET PREV_POINTING_COMPUTER_UPDATE_TIME TO POINTING_COMPUTER_UPDATE_TIME.

  SET POINTING_RATE TO VXCL(FACING_FORWARD, FORWARD_DEVIATION) * (1/TIME_DEVIATION).
  SET YAW_RATE TO VDOT(FACING_RIGHT, POINTING_RATE).
  SET PITCH_RATE TO VDOT(FACING_UP, POINTING_RATE).
  SET ROLL_RATE TO VDOT(FACING_RIGHT, VXCL(FACING_FORWARD, UP_DEVIATION)) * (1/TIME_DEVIATION).

  IF POINTING_MODE = "MANUAL" {
    UNLOCK STEERING.
  }

  IF POINTING_MODE = "NULL" {
    SET YAW_RATE_GOAL TO 0.
    SET PITCH_RATE_GOAL TO 0.
  }

  IF POINTING_MODE = "GUIDED" {
    SET GUIDE_DEVIATION TO VXCL(FACING_FORWARD, POINTING_GUIDE).
    SET OFFGUIDE_PANIC TO SQRT(MAX(0, VANG(FACING_FORWARD, POINTING_GUIDE) - 1)/30).
    SET GUIDE_DEVIATION TO GUIDE_DEVIATION:NORMALIZED.
    SET YAW_OFFGUIDE TO VDOT(FACING_RIGHT, GUIDE_DEVIATION) * OFFGUIDE_PANIC.
    SET PITCH_OFFGUIDE TO VDOT(FACING_UP, GUIDE_DEVIATION) * OFFGUIDE_PANIC.

    IF ABS(90-VANG(FACING_FORWARD, ROLL_GUIDE_1)) < ABS(90-VANG(FACING_FORWARD, ROLL_GUIDE_2)) {
      SET BEST_ROLL_GUIDE TO ROLL_GUIDE_1.
    }
    ELSE {
      SET BEST_ROLL_GUIDE TO ROLL_GUIDE_2.
    }

    SET BEST_ROLL_GUIDE TO VXCL(FACING_FORWARD, BEST_ROLL_GUIDE).

    SET ROLL_OFFGUIDE_PANIC TO SQRT(MAX(0, VANG(BEST_ROLL_GUIDE, FACING_UP) - 1)/30).
    SET ROLL_OFFGUIDE TO VDOT(FACING_RIGHT, BEST_ROLL_GUIDE) * ROLL_OFFGUIDE_PANIC.

    SET YAW_RATE_GOAL TO YAW_OFFGUIDE.
    SET PITCH_RATE_GOAL TO PITCH_OFFGUIDE.
    SET ROLL_RATE_GOAL TO ROLL_OFFGUIDE.
  }

  SET SHIP:CONTROL:YAW TO (YAW_RATE_GOAL-YAW_RATE)*10.
  SET SHIP:CONTROL:PITCH TO (PITCH_RATE_GOAL-PITCH_RATE)*10.

  IF VANG(BEST_ROLL_GUIDE, FACING_FORWARD) > 10 {  //safety to prevent gimbal lock, really should never happen because there are two roll guides
    SET SHIP:CONTROL:ROLL TO (ROLL_RATE_GOAL-ROLL_RATE)*10.
  }
  ELSE {
    SET SHIP:CONTROL:ROLL TO -ROLL_RATE*10.
  }
}